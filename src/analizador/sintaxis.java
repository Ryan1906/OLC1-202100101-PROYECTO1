
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import Errores.Excepcion;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintaxis extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\012\000\002\003" +
    "\004\000\002\003\003\000\002\005\010\000\002\005\006" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\003\000\002\010\005\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\006\005\000\002\006\005" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\003\000\002\006\005\000\002\004\004\000\002" +
    "\004\003\000\002\012\006\000\002\012\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\004\011\004\001\002\000\006\004\010\022" +
    "\011\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\010\004\010\020\067\022\011\001\002\000" +
    "\004\005\036\001\002\000\004\006\013\001\002\000\010" +
    "\004\ufffe\020\ufffe\022\ufffe\001\002\000\020\011\015\013" +
    "\022\014\023\015\014\016\017\017\016\027\021\001\002" +
    "\000\020\011\015\013\022\014\023\015\014\016\017\017" +
    "\016\027\021\001\002\000\004\022\033\001\002\000\020" +
    "\011\015\013\022\014\023\015\014\016\017\017\016\027" +
    "\021\001\002\000\020\011\015\013\022\014\023\015\014" +
    "\016\017\017\016\027\021\001\002\000\004\021\030\001" +
    "\002\000\022\011\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\021\uffeb\027\uffeb\001\002\000\020\011\015\013" +
    "\022\014\023\015\014\016\017\017\016\027\021\001\002" +
    "\000\020\011\015\013\022\014\023\015\014\016\017\017" +
    "\016\027\021\001\002\000\020\011\015\013\022\014\023" +
    "\015\014\016\017\017\016\027\021\001\002\000\022\011" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\021\uffef" +
    "\027\uffef\001\002\000\020\011\015\013\022\014\023\015" +
    "\014\016\017\017\016\027\021\001\002\000\022\011\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\021\ufff0\027" +
    "\ufff0\001\002\000\010\004\ufffc\020\ufffc\022\ufffc\001\002" +
    "\000\022\011\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\021\uffed\027\uffed\001\002\000\022\011\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\021\uffec\027\uffec\001" +
    "\002\000\004\012\034\001\002\000\022\011\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\021\uffea\027\uffea\001" +
    "\002\000\022\011\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\021\uffee\027\uffee\001\002\000\004\022\037\001" +
    "\002\000\004\006\040\001\002\000\012\023\047\024\046" +
    "\025\043\026\045\001\002\000\004\021\066\001\002\000" +
    "\006\007\ufff5\021\ufff5\001\002\000\010\007\ufff1\010\064" +
    "\021\ufff1\001\002\000\006\007\056\021\ufff7\001\002\000" +
    "\010\007\ufff2\010\054\021\ufff2\001\002\000\010\007\ufff4" +
    "\010\052\021\ufff4\001\002\000\010\007\ufff3\010\050\021" +
    "\ufff3\001\002\000\004\023\051\001\002\000\004\021\ufffa" +
    "\001\002\000\004\024\053\001\002\000\004\021\ufffb\001" +
    "\002\000\004\026\055\001\002\000\004\021\ufff8\001\002" +
    "\000\012\023\061\024\063\025\060\026\062\001\002\000" +
    "\006\007\ufff6\021\ufff6\001\002\000\006\007\ufff1\021\ufff1" +
    "\001\002\000\006\007\ufff3\021\ufff3\001\002\000\006\007" +
    "\ufff2\021\ufff2\001\002\000\006\007\ufff4\021\ufff4\001\002" +
    "\000\004\025\065\001\002\000\004\021\ufff9\001\002\000" +
    "\010\004\ufffd\020\ufffd\022\ufffd\001\002\000\004\020\071" +
    "\001\002\000\010\004\uffff\020\uffff\022\uffff\001\002\000" +
    "\004\020\072\001\002\000\004\020\073\001\002\000\004" +
    "\022\075\001\002\000\006\012\uffe8\022\uffe8\001\002\000" +
    "\004\005\101\001\002\000\006\012\100\022\075\001\002" +
    "\000\006\012\uffe9\022\uffe9\001\002\000\004\002\000\001" +
    "\002\000\006\027\102\030\103\001\002\000\004\021\105" +
    "\001\002\000\004\021\104\001\002\000\006\012\uffe7\022" +
    "\uffe7\001\002\000\006\012\uffe6\022\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\004\002\004\001\001\000\006\003\006\005" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\017\001\001\000\004\006\034" +
    "\001\001\000\002\001\001\000\004\006\031\001\001\000" +
    "\004\006\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\025\001\001\000\004\006\023\001\001\000" +
    "\004\006\024\001\001\000\002\001\001\000\004\006\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\040\010\043\011\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\075\012\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /// Arboles 
    public ArrayList<AFD> arboles = new ArrayList <>();
    public ArrayList<Conjunto> conjuntos = new ArrayList<Conjunto>();
    public ArrayList<Evaluacion> pruebas = new ArrayList<Evaluacion>();


    ///  declarar un arraylist para los errores sintacticos 
    public  ArrayList<Excepcion> erroresSintacticos = new ArrayList<Excepcion>();

    public void syntax_error(Symbol s){
        //System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        erroresSintacticos.add(new Excepcion("Sintáctico", "Error Recuperable de sintaxis: "+ s.value , Integer.toString(s.left+1), Integer.toString(s.right+1) ));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        erroresSintacticos.add(new Excepcion("Sintáctico", "Error No Recuperable de sintaxis: "+ s.value , Integer.toString(s.left+1), Integer.toString(s.right+1) ));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintaxis$actions {
  private final sintaxis parser;

  /** Constructor */
  CUP$sintaxis$actions(sintaxis parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintaxis$do_action_part00000000(
    int                        CUP$sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$sintaxis$parser,
    java.util.Stack            CUP$sintaxis$stack,
    int                        CUP$sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= codigo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintaxis$parser.done_parsing();
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // codigo ::= LLAVEA conjuntos PORCENTAJE PORCENTAJE PORCENTAJE PORCENTAJE comprobacion LLAVEC 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("codigo",0, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // conjuntos ::= conjuntos instruccion 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("conjuntos",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // conjuntos ::= instruccion 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("conjuntos",1, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= CONJ DOSPUNTOS IDENTIFICADOR FLECHA notacion PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int holaleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)).left;
		int holaright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)).right;
		String hola = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).value;
		 conjuntos.add(new Conjunto(hola,(ArrayList) b)); 
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= IDENTIFICADOR FLECHA regex PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int holaleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)).left;
		int holaright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)).right;
		String hola = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).value;
		
                             arboles.add(new AFD(hola, (arbol)a));
                            
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // notacion ::= MAYUSCULAS TILDE MAYUSCULAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.peek()).value;
		
            ArrayList<Integer> nuevo_conjunto = new ArrayList<Integer>();
            for(int i = (int) a.charAt(0);i<=(int) b.charAt(0);i++){
                nuevo_conjunto.add(i);
            }RESULT = nuevo_conjunto;
            
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("notacion",5, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // notacion ::= MINUSCULAS TILDE MINUSCULAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.peek()).value;
		
            ArrayList<Integer> nuevo_conjunto = new ArrayList<Integer>();
            for(int i = (int) a.charAt(0);i<=(int) b.charAt(0);i++){
                nuevo_conjunto.add(i);
            }RESULT = nuevo_conjunto;
            
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("notacion",5, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // notacion ::= NUMEROS TILDE NUMEROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.peek()).value;
		
            ArrayList<Integer> nuevo_conjunto = new ArrayList<Integer>();
            for(int i = (int) a.charAt(0);i<=(int) b.charAt(0);i++){
                nuevo_conjunto.add(i);
            }RESULT = nuevo_conjunto;
            
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("notacion",5, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // notacion ::= CARACTERES TILDE CARACTERES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.peek()).value;
		
            ArrayList<Integer> nuevo_conjunto = new ArrayList<Integer>();
            for(int i = (int) a.charAt(0);i<=(int) b.charAt(0);i++){
                nuevo_conjunto.add(i);
            }RESULT = nuevo_conjunto;
            
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("notacion",5, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // notacion ::= agrupacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$sintaxis$stack.peek()).value;
		
                String notacion = (String) a;
                ArrayList<Integer> nuevo_conjunto = new ArrayList<>();
                for(int i = 0;i < notacion.length();i++)
                {
                   nuevo_conjunto.add((int) notacion.charAt(i));
                }
                RESULT = nuevo_conjunto;
                
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("notacion",5, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // agrupacion ::= agrupacion COMA singular 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintaxis$stack.peek()).value;
		RESULT = (String)a+(String)b;
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("agrupacion",6, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // agrupacion ::= singular 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$sintaxis$stack.peek()).value;
		RESULT = a;
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("agrupacion",6, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // singular ::= MAYUSCULAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.peek()).value;
		RESULT = a;
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("singular",7, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // singular ::= MINUSCULAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.peek()).value;
		RESULT = a;
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("singular",7, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // singular ::= CARACTERES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.peek()).value;
		RESULT = a;
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("singular",7, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // singular ::= NUMEROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.peek()).value;
		RESULT = a;
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("singular",7, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // regex ::= CONCATENACION regex regex 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$sintaxis$stack.peek()).value;
		
                    arbol padre = new arbol(a);
                    padre.setHijoI((arbol)b);
                    padre.setHijoD((arbol)c);
                    RESULT = padre;
            
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("regex",4, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // regex ::= DISYUNCION regex regex 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$sintaxis$stack.peek()).value;
		
                    arbol padre = new arbol(a);
                    padre.setHijoI((arbol)b);
                    padre.setHijoD((arbol)c);
                    RESULT = padre;
            
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("regex",4, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // regex ::= ASTERISCO regex 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintaxis$stack.peek()).value;
		
                    arbol padre = new arbol(a);
                    padre.setHijoI((arbol)b);
                    RESULT = padre;
            
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("regex",4, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // regex ::= SUMA regex 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintaxis$stack.peek()).value;
		
                    arbol padre = new arbol(a);
                    padre.setHijoI((arbol)b);
                    RESULT = padre;
            
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("regex",4, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // regex ::= INTERROGACION regex 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintaxis$stack.peek()).value;
		
                    arbol padre = new arbol(a);
                    padre.setHijoI((arbol)b);
                    RESULT = padre;
            
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("regex",4, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // regex ::= CARACTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.peek()).value;
		
                    arbol hoja=new arbol(a);
                    hoja.setHoja(true);
                    hoja.setAnulable(false);
                    RESULT = hoja;
            
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("regex",4, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // regex ::= LLAVEA IDENTIFICADOR LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).value;
		
                    arbol hoja=new arbol(a);
                    hoja.setHoja(true);
                    hoja.setAnulable(false);
                    RESULT = hoja;
            
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("regex",4, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comprobacion ::= comprobacion evaluacion 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("comprobacion",2, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comprobacion ::= evaluacion 
            {
              Object RESULT =null;

              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("comprobacion",2, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // evaluacion ::= IDENTIFICADOR DOSPUNTOS CADENA PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).value;
		 pruebas.add(new Evaluacion(a,b));
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("evaluacion",8, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // evaluacion ::= IDENTIFICADOR DOSPUNTOS CARACTER PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-1)).value;
		 pruebas.add(new Evaluacion(a,b));
              CUP$sintaxis$result = parser.getSymbolFactory().newSymbol("evaluacion",8, ((java_cup.runtime.Symbol)CUP$sintaxis$stack.elementAt(CUP$sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$sintaxis$stack.peek()), RESULT);
            }
          return CUP$sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintaxis$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintaxis$do_action(
    int                        CUP$sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$sintaxis$parser,
    java.util.Stack            CUP$sintaxis$stack,
    int                        CUP$sintaxis$top)
    throws java.lang.Exception
    {
              return CUP$sintaxis$do_action_part00000000(
                               CUP$sintaxis$act_num,
                               CUP$sintaxis$parser,
                               CUP$sintaxis$stack,
                               CUP$sintaxis$top);
    }
}

}
